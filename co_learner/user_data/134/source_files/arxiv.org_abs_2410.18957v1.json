{
    "link": "http://arxiv.org/abs/2410.18957v1",
    "title": "桥接编码器：解锁低资源代码中的语言鸿沟，充分发挥大语言模型潜力",
    "summary": "大型语言模型（LLMs）在生成像Python这样的高资源编程语言（HRPLs）代码方面展现出强大的能力，但在处理像Racket或D这样的低资源编程语言（LRPLs）时则面临显著困难。这种性能差距加剧了数字鸿沟，阻碍了使用LRPLs的开发者平等地从LLM的进步中获益，进一步加剧了在未充分代表的编程社区中的创新不平等。虽然为LRPLs生成额外的训练数据有前景，但它面临两个主要挑战：手动注解劳动强度大、成本高，而LLM生成的LRPL代码质量往往欠佳。这个问题的根本原因在于自然语言到编程语言之间的鸿沟（NL-PL Gap），在LRPLs中尤为突出，因为它们缺乏对齐的数据。在本工作中，我们提出了一种名为Bridge-Coder的创新方法，它利用LLMs的内在能力来提升在LRPLs上的性能。我们的方法包含两个关键阶段：Bridge Generation，我们利用LLMs的通用知识理解、对HRPLs的熟练掌握以及上下文学习能力来创建高质量数据集。然后，我们应用Bridged Alignment，这会逐步改善NL指令与LRPLs之间的对齐。多个LRPLs的实验结果显示，Bridge-Coder显著提升了模型性能，证明了我们的方法的有效性和泛化能力。此外，我们对方法的关键组件进行了深入分析，为未来旨在解决与LRPLs相关挑战的工作提供了有价值的见解。",
    "user_summary": "大型语言模型（LLMs）在生成像Python这样的高资源编程语言（HRPLs）代码方面展现出强大的能力，但在处理像Racket或D这样的低资源编程语言（LRPLs）时则面临显著困难。这种性能差距加剧了数字鸿沟，阻碍了使用LRPLs的开发者平等地从LLM的进步中获益，进一步加剧了在未充分代表的编程社区中的创新不平等。虽然为LRPLs生成额外的训练数据有前景，但它面临两个主要挑战：手动注解劳动强度大、成本高，而LLM生成的LRPL代码质量往往欠佳。这个问题的根本原因在于自然语言到编程语言之间的鸿沟（NL-PL Gap），在LRPLs中尤为突出，因为它们缺乏对齐的数据。在本工作中，我们提出了一种名为Bridge-Coder的创新方法，它利用LLMs的内在能力来提升在LRPLs上的性能。我们的方法包含两个关键阶段：Bridge Generation，我们利用LLMs的通用知识理解、对HRPLs的熟练掌握以及上下文学习能力来创建高质量数据集。然后，我们应用Bridged Alignment，这会逐步改善NL指令与LRPLs之间的对齐。多个LRPLs的实验结果显示，Bridge-Coder显著提升了模型性能，证明了我们的方法的有效性和泛化能力。此外，我们对方法的关键组件进行了深入分析，为未来旨在解决与LRPLs相关挑战的工作提供了有价值的见解。",
    "keywords": [
        "编程语言",
        "LLMs",
        "HRPLs",
        "LRPLs",
        "数字鸿沟",
        "手动注解",
        "LLM",
        "生成",
        "高质量数据集",
        "Bridge-Coder",
        "Bridge",
        "Generation",
        "Bridged",
        "Alignment",
        "NL-PL",
        "Gap",
        "实验",
        "有效性",
        "泛化能力",
        "关键组件",
        "挑战"
    ],
    "timestamp": "2024-10-27T05:14:22.578573"
}